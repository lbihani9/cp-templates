{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Union-Find": {
		"prefix": "cp_union_find",
		"body": [
			"const int MAXN = 1e5 + 2; // check the limits.",
			"struct DSU {",
			"    int parent[MAXN];",
			"    int sz[MAXN];",
			"",
			"    DSU(int n) {",
			"        memset(parent, 0, sizeof(parent)); memset(sz, 0, sizeof(sz));",
			"",
			"        for (int i=1; i<=n; ++i) { parent[i] = i; sz[i] = 1; }",
			"    }",
			"    int find(int node) {",
			"        if (node == parent[node]) return node;",
			"        return parent[node] = find(parent[node]);",
			"    }",
			"    void merge(int node1, int node2) {",
			"        int p1 = find(node1);",
			"        int p2 = find(node2);",
			"        if (p1 == p2) { return; }",
			"        ",
			"        if (sz[p1] >= sz[p2]) { parent[p2] = p1; sz[p1] += sz[p2]; }",
			"        else { parent[p1] = p2; sz[p2] += sz[p1]; }",
			"        return;",
			"    }",
			"};"
		],
		"description": "Union-Find"
	}
}
