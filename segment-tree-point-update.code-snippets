{
	"segment-tree-point-update": {
		"prefix": "cp_seg_point",
		"body": [
			"// check instantiation and return types, parameter types of all methods accordingly.",
			"struct SegmentTree {",
			"    // using zero based indexing",
			"private:",
			"    int originalSize=0;",
			"    vector<int> __tree;",
			"public:",
			"    SegmentTree(int sz) {",
			"        originalSize = sz;",
			"        __tree = vector<int>(4*sz, 0);",
			"    }",
			"    void build(vector<int>& A) { __buildSegmentTree(A, 0, 0, originalSize - 1); }",
			"",
			"    void update(int index, int newVal) { __updateSegmentTree(0, 0, originalSize - 1, index, newVal); }",
			"",
			"    int query(int ql, int qr) { int res = __query(0, 0, originalSize - 1, ql, qr); return res; }",
			"",
			"    void __buildSegmentTree(vector<int>& A, int node, int start, int end) {",
			"        if (start == end) {",
			"            __tree[node] = __assignValue(A[start]);",
			"        }",
			"        else {",
			"            int mid = start + (end - start)/2;",
			"            __buildSegmentTree(A, 2*node + 1, start, mid);",
			"            __buildSegmentTree(A, 2*node + 2, mid + 1, end);",
			"",
			"            __tree[node] = __merge(__tree[2*node + 1], __tree[2*node + 2]);",
			"        }",
			"        return;",
			"    }",
			"    void __updateSegmentTree(int node, int start, int end, int index, int newVal) {",
			"        if (start == end) {",
			"            __tree[node] = __assignValue(newVal);",
			"        }",
			"        else {",
			"            int mid = start + (end - start)/2;",
			"            if (index <= mid) {",
			"                __updateSegmentTree(2*node + 1, start, mid, index, newVal);",
			"            }",
			"            else {",
			"                __updateSegmentTree(2*node + 2, mid+1, end, index, newVal);",
			"            }",
			"",
			"            __tree[node] = __merge(__tree[2*node + 1], __tree[2*node + 2]);",
			"        }",
			"        return;",
			"    }",
			"    int __query(int node, int start, int end, int ql, int qr) {",
			"        if (start > qr || end < ql) {",
			"            return 0;",
			"        }",
			"        if (ql <= start && end <= qr) {",
			"            return __tree[node];",
			"        }",
			"",
			"        int mid = start + (end - start)/2;",
			"        int left = __query(2*node + 1, start, mid, ql, qr);",
			"        int right = __query(2*node + 2, mid + 1, end, ql, qr);",
			"",
			"        return __merge(left, right);",
			"    }",
			"    int __assignValue(int val) {",
			"        return val;",
			"    }",
			"    int __merge(int child1, int child2) {",
			"        return child1 + child2;",
			"    }",
			"};"
		],
		"description": "segment-tree-point-update"
	}
}
