{
	"Trie": {
		"prefix": "cp_trie",
		"body": [
			"// check parameters, return types, limits",
			"class TrieNode {",
			"public:",
			"    char val;",
			"    vector<TrieNode*> children;",
			"    bool isEnd;",
			"",
			"    TrieNode(char c) {",
			"        val = c;",
			"        children = vector<TrieNode*>(26, nullptr);",
			"        isEnd = false;",
			"    }",
			"};",
			"",
			"class Trie {",
			"public:",
			"    TrieNode* root;",
			"",
			"    Trie() {",
			"        root = new TrieNode('*');",
			"    }",
			"",
			"    void build(vector<string>& dictionary) { // check parameters",
			"        for (string& str: dictionary) {",
			"            TrieNode* ptr = root;",
			"            for (char c: str) {",
			"                if (!ptr->children[c - 'a']) {",
			"                    ptr->children[c - 'a'] = new TrieNode(c);",
			"                }",
			"                ptr = ptr->children[c - 'a'];",
			"            }",
			"            ptr->isEnd = true;",
			"        }",
			"        return;",
			"    }",
			"",
			"};"
		],
		"description": "Trie"
	}
}
