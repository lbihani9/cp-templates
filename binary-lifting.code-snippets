{
	"Binary-Lifting": {
		"prefix": "cp_binary_lifting",
		"body": [
			"// using 0 based indexing",
			"// remember that depth is from top to bottom. i.e., depth[root] = 0.",
			"struct BinaryLifting",
			"{",
			"private:",
			"    int LOG; // set this value for every problem.",
			"    int original_size;",
			"    vector<vector<int>> ancestor;",
			" ",
			"public:",
			"    BinaryLifting(int n)",
			"    {",
			"        LOG = 32;",
			"        original_size = n;",
			"        ancestor = vector<vector<int>>(n + 1, vector<int>(LOG, 0));",
			"    }",
			" ",
			"    void build(vector<int> &parent)",
			"    {",
			"        for (int i = 0; i < original_size; ++i)",
			"        {",
			"            ancestor[i][0] = parent[i];",
			"        }",
			" ",
			"        for (int j = 1; j < LOG; ++j)",
			"        {",
			"            for (int i = 0; i < original_size; ++i)",
			"            {",
			"                int x = ancestor[i][j - 1]; // ancestor at (2^(j-1)) distance from i.",
			"                ancestor[i][j] = ancestor[x][j - 1];",
			"            }",
			"        }",
			"        return;",
			"    }",
			" ",
			"    int kth_parent(int k, int node)",
			"    {",
			"        for (int j = LOG - 1; j >= 0; --j)",
			"        {",
			"            int v = (1LL << j);",
			"            if (k >= v)",
			"            {",
			"                k -= v;",
			"                node = ancestor[node][j];",
			"            }",
			"        }",
			"        return node;",
			"    }",
			" ",
			"    int getLCA(vector<int> &depth, int node1, int node2)",
			"    {",
			"        if (depth[node1] > depth[node2])",
			"        {",
			"            swap(node1, node2);",
			"        }",
			" ",
			"        int k = abs(depth[node1] - depth[node2]);",
			"        node2 = kth_parent(k, node2);",
			" ",
			"        if (node1 == node2)",
			"        {",
			"            return node1;",
			"        }",
			"        for (int j = LOG - 1; j >= 0; --j)",
			"        {",
			"            if (ancestor[node1][j] != ancestor[node2][j])",
			"            {",
			"                node1 = ancestor[node1][j];",
			"                node2 = ancestor[node2][j];",
			"            }",
			"        }",
			" ",
			"        return ancestor[node1][0];",
			"    }",
			"};"
		],
		"description": "Binary-Lifting"
	}
}
