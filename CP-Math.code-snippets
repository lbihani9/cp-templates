{
	"CP-Math": {
		"prefix": "cp_math",
		"body": [
			"template<typename T> T ceilDiv(T x, T y) { return ((x%y == 0) ? x/y : x/y + 1); }",
			"",
			"template<typename T> T modMul(T a, T b, T M) {",
			"    a %= M; b %= M;",
			"    return ((a * b)%M + M) % M;",
			"}",
			"",
			"template<typename T> T modAdd(T a, T b, T M) {",
			"    a %= M; b %= M;",
			"    return ((a + b)%M + M) % M;",
			"}",
			"",
			"template<typename T> T modExpo(T x,T p,T M) {",
			"    T res = 1;",
			"    while(p > 0) {",
			"        if(p % 2 ==1) { res = (res * x)%M; }",
			"        x = (x*x)%M;",
			"        p /= 2;",
			"    }",
			"    return res;",
			"}",
			"",
			"template<typename T> T modInverse(T A,T M) { return (modExpo(A,M-2,M) % M); }",
			"",
			"",
			"vector<int> fact(2e5 + 5, 1);",
			"vector<int> ifact(2e5 + 5, 1);",
			"",
			"template<typename T> void factorial(T n, T M) {",
			"    ",
			"    for (T i=2; i<=n; ++i) { ",
			"        fact[i] = (fact[i-1]*i) % M;",
			"        ifact[i] = modInverse(fact[i], M);",
			"    }",
			"    return;",
			"}",
			"",
			"template<typename T> T ncr(T n, T r, T M) {",
			"    /*",
			"        ncr = fact(n)/(fact(r)*fact(n-r))",
			"    */",
			"",
			"    T numerator = fact[n];",
			"    T denominator = modMul(ifact[r], ifact[n-r], M);",
			"",
			"    // T ans = modMul(numerator, modInverse(denominator, M), M);",
			"    T ans = modMul(numerator, denominator, M);",
			"    return ans;",
			"}",
			"",
			"template<typename T> bool isPrime(T num) {",
			"    if (num == 2) { return true; }",
			"    if (num%2 == 0) { return false; }",
			"    for (T i=3; i*i<=num; i+=2) {",
			"        if (num%i == 0) { return false; }",
			"    }",
			"    return true;",
			"}",
			"",
			"//int MAXN=300000;",
			"vector<int> isPrime(MAXN, 1);",
			"void sieve() {",
			"    isPrime[0] = isPrime[1] = 0;",
			"    for (int j=4; j<MAXN; j += 2) {",
			"        isPrime[j] = 0;",
			"    }",
			"    for (int i=3; i*i < MAXN; i += 2) {",
			"        if (isPrime[i] == 1) {",
			"            for (int j=i*i; j < MAXN; j += i) {",
			"                isPrime[j] = 0;",
			"            }",
			"        }",
			"    }",
			"    return;",
			"}",
			"",
			"//const int MAXN = 1e6 + 1;",
			"vector<int> phi(MAXN, 1);",
			"void eulerSieve() {",
			"    for (int i=1; i<MAXN; ++i) {",
			"        phi[i] = i;",
			"    }",
			"    for (int i=2; i < MAXN; ++i) {",
			"        if (phi[i] == i) {",
			"            for (int j=i; j<MAXN; j += i) {",
			"                phi[j] -= (phi[j]/i);",
			"            }",
			"        }",
			"    }",
			"    return;",
			"}",
			"",
			""
		],
		"description": "CP-Math"
	}
}
